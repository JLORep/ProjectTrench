#!/bin/bash
#
# TrenchCoat Pro - Improved Post-Commit Hook
# Prevents timeouts by running deployment in background
# Enhanced error handling and logging
#

# Configuration
HOOK_LOG_FILE="deployment_hook.log"
MAX_DEPLOYMENT_TIME=300  # 5 minutes max
PROJECT_DIR="$(git rev-parse --show-toplevel)"
LOCK_FILE="$PROJECT_DIR/.deployment.lock"

# Logging function
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$PROJECT_DIR/$HOOK_LOG_FILE"
}

# Check if deployment is already running
if [ -f "$LOCK_FILE" ]; then
    log_message "SKIP: Deployment already in progress (lock file exists)"
    echo "INFO: Deployment already in progress, skipping..."
    exit 0
fi

# Get the commit message
COMMIT_MSG=$(git log -1 --pretty=%B)
COMMIT_HASH=$(git log -1 --pretty=%h)

# Convert to lowercase for checking
COMMIT_LOWER=$(echo "$COMMIT_MSG" | tr '[:upper:]' '[:lower:]')

# Check if this commit should trigger a deployment
SHOULD_DEPLOY=false

# Keywords that trigger deployment
if [[ $COMMIT_LOWER == *"fix"* ]] || [[ $COMMIT_LOWER == *"bug"* ]] || [[ $COMMIT_LOWER == *"feature"* ]] || [[ $COMMIT_LOWER == *"add"* ]] || [[ $COMMIT_LOWER == *"implement"* ]] || [[ $COMMIT_LOWER == *"enhance"* ]]; then
    SHOULD_DEPLOY=true
fi

# Skip deployment for certain patterns
if [[ $COMMIT_LOWER == *"wip"* ]] || [[ $COMMIT_LOWER == *"temp"* ]] || [[ $COMMIT_LOWER == *"draft"* ]] || [[ $COMMIT_LOWER == *"test:"* ]]; then
    SHOULD_DEPLOY=false
fi

# Skip if this is the deployment system itself being updated
if [[ $COMMIT_LOWER == *"deployment"* ]] && [[ $COMMIT_LOWER == *"hook"* ]]; then
    SHOULD_DEPLOY=false
fi

if [ "$SHOULD_DEPLOY" = true ]; then
    log_message "TRIGGER: Auto-deployment triggered by commit $COMMIT_HASH: $COMMIT_MSG"
    echo "DEPLOYMENT: Auto-deployment triggered for commit $COMMIT_HASH"
    echo "COMMIT: $COMMIT_MSG"
    
    # Create lock file
    echo "$COMMIT_HASH" > "$LOCK_FILE"
    
    # Background deployment function
    run_deployment() {
        local commit_hash="$1"
        local commit_msg="$2"
        
        log_message "START: Beginning background deployment for $commit_hash"
        
        # Change to project directory
        cd "$PROJECT_DIR" || {
            log_message "ERROR: Cannot change to project directory $PROJECT_DIR"
            rm -f "$LOCK_FILE"
            exit 1
        }
        
        # Set timeout for deployment
        timeout $MAX_DEPLOYMENT_TIME python enhanced_auto_deploy.py 2>&1 | while IFS= read -r line; do
            log_message "DEPLOY: $line"
        done
        
        local exit_code=${PIPESTATUS[0]}
        
        if [ $exit_code -eq 0 ]; then
            log_message "SUCCESS: Automated deployment completed successfully for $commit_hash"
            
            # Send success notification
            curl -s -H "Content-Type: application/json" \
                -d "{\"content\": \"✅ **Auto-Deployment Success**\\n\\n🚀 **Commit:** $commit_hash\\n📝 **Message:** $commit_msg\\n⏰ **Time:** $(date '+%H:%M:%S UTC')\\n\\n🎯 **TrenchCoat Pro**\"}" \
                "https://discord.com/api/webhooks/1400577499225657404/x3eRkhbp84bA_3f3AuyUIrBhDtozTGnVbxVrPg3ewLWIL3eO0s_GZoiW0lRQr6Kb5jQ3" \
                >> "$PROJECT_DIR/$HOOK_LOG_FILE" 2>&1
                
        elif [ $exit_code -eq 124 ]; then
            log_message "TIMEOUT: Deployment timed out after $MAX_DEPLOYMENT_TIME seconds for $commit_hash"
            
            # Send timeout notification
            curl -s -H "Content-Type: application/json" \
                -d "{\"content\": \"⏰ **Auto-Deployment Timeout**\\n\\n❌ **Commit:** $commit_hash\\n📝 **Message:** $commit_msg\\n🕐 **Timeout:** ${MAX_DEPLOYMENT_TIME}s\\n\\n⚠️ **Manual deployment may be required**\\n\\n🎯 **TrenchCoat Pro**\"}" \
                "https://discord.com/api/webhooks/1400577499225657404/x3eRkhbp84bA_3f3AuyUIrBhDtozTGnVbxVrPg3ewLWIL3eO0s_GZoiW0lRQr6Kb5jQ3" \
                >> "$PROJECT_DIR/$HOOK_LOG_FILE" 2>&1
                
        else
            log_message "FAILED: Automated deployment failed with exit code $exit_code for $commit_hash"
            
            # Send failure notification
            curl -s -H "Content-Type: application/json" \
                -d "{\"content\": \"❌ **Auto-Deployment Failed**\\n\\n🚫 **Commit:** $commit_hash\\n📝 **Message:** $commit_msg\\n💥 **Exit Code:** $exit_code\\n\\n🔧 **Check logs for details**\\n\\n🎯 **TrenchCoat Pro**\"}" \
                "https://discord.com/api/webhooks/1400577499225657404/x3eRkhbp84bA_3f3AuyUIrBhDtozTGnVbxVrPg3ewLWIL3eO0s_GZoiW0lRQr6Kb5jQ3" \
                >> "$PROJECT_DIR/$HOOK_LOG_FILE" 2>&1
        fi
        
        # Clean up lock file
        rm -f "$LOCK_FILE"
        log_message "CLEANUP: Removed lock file, deployment process complete"
    }
    
    # Run deployment in background to prevent git timeout
    run_deployment "$COMMIT_HASH" "$COMMIT_MSG" &
    
    # Get background process PID
    DEPLOY_PID=$!
    
    log_message "BACKGROUND: Started deployment process PID $DEPLOY_PID"
    echo "BACKGROUND: Deployment started in background (PID: $DEPLOY_PID)"
    echo "LOGS: Check $HOOK_LOG_FILE for progress"
    
    # Don't wait for background process - this prevents git timeout
    exit 0
    
else
    log_message "SKIP: Commit $COMMIT_HASH does not trigger deployment: $COMMIT_MSG"
    echo "INFO: Commit does not trigger deployment"
fi

exit 0