#!/usr/bin/env python3
"""
Test emoji encoding for TrenchCoat Pro dashboard
Verify all emojis used in the app are properly handled
"""
import os
import sys

# Set UTF-8 encoding
os.environ['PYTHONIOENCODING'] = 'utf-8'

def test_emojis():
    """Test all emojis used in the dashboard"""
    
    # List of all emojis used in streamlit_app.py
    dashboard_emojis = [
        '🎯',  # Target - TrenchCoat Pro logo
        '💰',  # Portfolio Value
        '📡',  # Active Signals
        '⚡',  # Speed
        '🟢',  # Live status
        '🔥',  # Live Market Signals
        '📈',  # BUY signal
        '🚀',  # STRONG BUY
        '💎',  # HOLD
        '🧠',  # AI Analytics
        '🤖',  # Trading Bot
        '📊',  # Performance
        '✅',  # Completed
        '🟡',  # Monitoring
        '🔵',  # Status
        '⚠️',  # Warning
        '🏆',  # Total Profit
        '📚',  # Total Trades
        '🔄',  # Refresh
        '🔒',  # Security
        '🕒',  # Time
        '🔔',  # Alerts
        '💾',  # Export
        '⚙️',  # Settings
    ]
    
    results = {
        'total_emojis': len(dashboard_emojis),
        'working_emojis': 0,
        'failed_emojis': 0,
        'failures': []
    }
    
    for emoji in dashboard_emojis:
        try:
            # Test UTF-8 encoding
            encoded = emoji.encode('utf-8')
            decoded = encoded.decode('utf-8')
            
            # Test that emoji matches after round-trip
            if emoji == decoded:
                results['working_emojis'] += 1
            else:
                results['failed_emojis'] += 1
                results['failures'].append(f"{emoji} - Round-trip mismatch")
                
        except Exception as e:
            results['failed_emojis'] += 1
            results['failures'].append(f"{emoji} - Error: {str(e)}")
    
    return results

def create_test_report():
    """Create a test report file"""
    results = test_emojis()
    
    success_rate = (results['working_emojis'] / results['total_emojis']) * 100
    
    report = f"""
# TrenchCoat Pro - Emoji Encoding Test Report

## Summary
- **Total Emojis Tested**: {results['total_emojis']}
- **Working Emojis**: {results['working_emojis']} 
- **Failed Emojis**: {results['failed_emojis']}
- **Success Rate**: {success_rate:.1f}%

## Status
{'✅ ALL EMOJIS WORKING' if results['failed_emojis'] == 0 else '⚠️ SOME EMOJIS FAILED'}

## Dashboard Readiness
{'🚀 READY FOR PRODUCTION' if success_rate >= 95 else '🔧 NEEDS ATTENTION'}

## Failures
{chr(10).join(results['failures']) if results['failures'] else 'None - All emojis working perfectly!'}

## Next Steps
{'Dashboard emojis are fully compatible and ready for deployment.' if results['failed_emojis'] == 0 else 'Review failed emojis and consider fallbacks.'}

---
*Generated by TrenchCoat Pro Dashboard Testing System*
"""
    
    with open('emoji_test_report.txt', 'w', encoding='utf-8') as f:
        f.write(report)
    
    return results

if __name__ == "__main__":
    try:
        results = create_test_report()
        # Use basic ASCII for output to avoid console encoding issues
        status = "SUCCESS" if results['failed_emojis'] == 0 else "WARNING"
        working = results['working_emojis']
        total = results['total_emojis']
        
        # Safe console output without emojis
        sys.stdout.write(f"[{status}] Emoji test completed: {working}/{total} working\n")
        sys.stdout.write("Report saved to: emoji_test_report.txt\n")
        
        if results['failed_emojis'] == 0:
            sys.stdout.write("Dashboard emoji encoding: READY FOR PRODUCTION\n")
        else:
            sys.stdout.write("Dashboard emoji encoding: NEEDS REVIEW\n")
            
    except Exception as e:
        sys.stdout.write(f"[ERROR] Test failed: {str(e)}\n")
        sys.exit(1)